{% extends 'L91SeoBundle::base.html.twig' %}

{% block content %}
    <br/>

    <a href="{{ path('l91_seo.crawl.overview') }}">Back</a>

    <br/>
    <br/>

    <div class="row">
        <div class="col-md-6">
            <table class="table table-striped">
                <tr>
                    <th>Url</th>
                    <td>
                        <a href="{{ crawl.uri }}" target="_blank">
                            {{ crawl.uri }}
                        </a>
                    </td>
                </tr>

                <tr>
                    <th>Depth</th>
                    <td>{{ crawl.depth }}</td>
                </tr>

                <tr>
                    <th>External</th>
                    <td>{{ crawl.external ? 'true' : 'false' }}</td>
                </tr>

                <tr>
                    <th>Finished</th>
                    <td>{{ crawl.finished ? 'true' : 'false' }}</td>
                </tr>

                <tr>
                    <th>Created</th>
                    <td>{{ crawl.created.format('Y-m-d H:i:s') }}</td>
                </tr>
            </table>
        </div>

        <div class="col-md-6">
            <table class="table table-striped">
                <tr>
                    <th>Total</th>
                    <td>{{ crawl.total }}</td>
                </tr>

                <tr>
                    <th>Internal</th>
                    <td>{{ crawl.internalUrls }}</td>
                </tr>

                <tr>
                    <th>External</th>
                    <td>{{ crawl.externalUrls }}</td>
                </tr>
            </table>
        </div>
    </div>

    <ul class="nav nav-tabs">
        <li class="active">
            <a href="#list" data-toggle="tab">List</a>
        </li>
        <li>
            <a href="#tree" data-toggle="tab">Tree</a>
        </li>
        <li>
            <a href="#chord" data-toggle="tab">Chord</a>
        </li>
    </ul>

    <div class="tab-content">
        <div id="list" class="tab-pane fade in active">
            <table id="table" class="table table-striped">
                <thead>
                    <tr>
                        <th>Position</th>
                        <th>Uri</th>
                        <th>Statuscode</th>
                        <th>Type</th>
                        <th>Depth</th>
                        <th>Incoming</th>
                        <th>Outgoing</th>
                    </tr>
                </thead>

                <tbody>
                    {% for url in crawl.urls %}
                        {% set class = '' %}
                        {% if url.statusCode >= 200 and url.statusCode < 300 %}
                            {% set class = 'success' %}
                        {% elseif url.statusCode >= 300 and url.statusCode < 400 %}
                            {% set class = 'info' %}
                        {% elseif url.statusCode >= 400 and url.statusCode < 500 %}
                            {% set class = 'danger' %}
                        {% elseif url.statusCode >= 500 and url.statusCode < 600 or url.timeout %}
                            {% set class = 'danger' %}
                        {% endif %}

                        <tr class="{{ class }}">
                            <td>{{ url.position }}</td>
                            <td>
                                <a href="{{ path('l91_seo.crawl.url', { id: crawl.id, urlId: url.id }) }}"
                                   class="break-word">
                                    {{ url.uri }}
                                </a>
                            </td>
                            <td>{{ url.timeout ? 'timeout' : url.statusCode }}</td>
                            <td>{{ url.type }}</td>
                            <td>{{ url.depth }}</td>
                            <td>{{ url.incomingLinksCount }}</td>
                            <td>{{ url.outgoingLinksCount }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <div id="tree" class="tab-pane fade">

        </div>

        <div id="chord" class="tab-pane fade">
            <svg id="chord-diagram" width="960" height="960"></svg>

            <script>
                var matrix = {{ crawl.matrix|json_encode(constant('JSON_NUMERIC_CHECK'))|raw }};
                var titles = {{ crawl.titles|json_encode(constant('JSON_NUMERIC_CHECK'))|raw }};

                var svg = d3.select("svg"),
                    width = +svg.attr("width"),
                    height = +svg.attr("height"),
                    outerRadius = Math.min(width, height) * 0.5 - 40,
                    innerRadius = outerRadius - 30;

                var chord = d3.chord()
                    .padAngle(0.015)
                    .sortSubgroups(d3.descending);

                var arc = d3.arc()
                    .innerRadius(innerRadius)
                    .outerRadius(outerRadius);

                var ribbon = d3.ribbon()
                    .radius(innerRadius);

                var color = d3.scaleOrdinal()
                    .domain(d3.range(4))
                    .range(["#000000", "#FFDD89", "#957244", "#F26223"]);

                var g = svg.append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
                    .datum(chord(matrix));

                var group = g.append("g")
                    .attr("class", "groups")
                    .selectAll("g")
                    .data(function(chords) { return chords.groups; })
                    .enter().append("g");

                group.append("path")
                    .style("fill", function(d) { return color(d.index); })
                    .style("stroke", function(d) { return d3.rgb(color(d.index)).darker(); })
                    .attr("d", arc);

                var groupTick = group.selectAll(".group-tick")
                    .data(function(d) { return groupTicks(d, 1e3); })
                    .enter().append("g")
                    .attr("class", "group-tick")
                    .attr("transform", function(d) { return "rotate(" + (d.angle * 180 / Math.PI - 90) + ") translate(" + outerRadius + ",0)"; });

                groupTick.append("line")
                    .attr("x2", 6);

                groupTick
                    // .filter(function(d) { return d.value % 5e3 === 0; })
                    .append("text")
                    .attr("x", 8)
                    .attr("dy", ".35em")
                    .attr("transform", function(d) { return d.angle > Math.PI ? "rotate(180) translate(-16)" : null; })
                    .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
                    .text(function(d) {return d.title;});

                g.append("g")
                    .attr("class", "ribbons")
                    .selectAll("path")
                    .data(function(chords) { return chords; })
                    .enter().append("path")
                    .attr("d", ribbon)
                    .style("fill", function(d) { return color(d.target.index); })
                    .style("stroke", function(d) { return d3.rgb(color(d.target.index)).darker(); });

                // Returns an array of tick angles and values for a given group and step.
                function groupTicks(d, step) {
                    var k = (d.endAngle - d.startAngle) / d.value;
                    return d3.range(0, d.value, step).map(function(value) {
                        console.error(d.value);

                        return {value: d.value, title: d.index, angle: value * k + d.startAngle};
                        // return {value: value, angle: value * k + d.startAngle};
                    });
                }
            </script>
        </div>
    </div>
{% endblock %}
